package org.wildfly.jiras.issue7841;import org.apache.deltaspike.core.api.provider.BeanProvider;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import javax.annotation.Resource;import javax.enterprise.concurrent.ContextService;import javax.enterprise.concurrent.ManagedScheduledExecutorService;import javax.enterprise.context.ApplicationScoped;import javax.enterprise.event.Observes;import javax.enterprise.inject.spi.AfterDeploymentValidation;import javax.enterprise.inject.spi.Extension;import javax.inject.Inject;import java.util.concurrent.ScheduledFuture;import static java.util.Collections.singletonMap;import static java.util.concurrent.TimeUnit.SECONDS;import static javax.enterprise.concurrent.ManagedTask.TRANSACTION;import static javax.enterprise.concurrent.ManagedTask.USE_TRANSACTION_OF_EXECUTION_THREAD;@ApplicationScopedpublic class MyCdiTimer implements Extension {    private static final Logger LOG = LoggerFactory.getLogger(MyCdiTimer.class.getName());    @Inject    private Job job;    @Resource    private ManagedScheduledExecutorService executor;    @Resource    private ContextService proxy;    public final void afterInitialized(@Observes AfterDeploymentValidation event) {        BeanProvider.injectFields(this);        Class<Runnable> cls = Runnable.class;        Runnable job = proxy.createContextualProxy(this.job/*, singletonMap(TRANSACTION, USE_TRANSACTION_OF_EXECUTION_THREAD)*/, cls);        LOG.info("Before async submit.");        executor.scheduleAtFixedRate(() -> {            LOG.info("Running Async via javax.enterprise.concurrent.");            job.run();        }, 5, 60, SECONDS);        LOG.info("After async submit.");    }}